// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: api/grpc/timeserver.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimestampService_GetTimestamp_FullMethodName    = "/timeserver.TimestampService/GetTimestamp"
	TimestampService_VerifyTimestamp_FullMethodName = "/timeserver.TimestampService/VerifyTimestamp"
	TimestampService_GetValidators_FullMethodName   = "/timeserver.TimestampService/GetValidators"
	TimestampService_GetStatus_FullMethodName       = "/timeserver.TimestampService/GetStatus"
)

// TimestampServiceClient is the client API for TimestampService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TimestampService provides methods for getting and verifying timestamps
type TimestampServiceClient interface {
	// GetTimestamp requests a new signed timestamp
	GetTimestamp(ctx context.Context, in *GetTimestampRequest, opts ...grpc.CallOption) (*GetTimestampResponse, error)
	// VerifyTimestamp verifies a timestamp's signatures
	VerifyTimestamp(ctx context.Context, in *VerifyTimestampRequest, opts ...grpc.CallOption) (*VerifyTimestampResponse, error)
	// GetValidators returns the list of active validators
	GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error)
	// GetStatus returns the node's current status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type timestampServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimestampServiceClient(cc grpc.ClientConnInterface) TimestampServiceClient {
	return &timestampServiceClient{cc}
}

func (c *timestampServiceClient) GetTimestamp(ctx context.Context, in *GetTimestampRequest, opts ...grpc.CallOption) (*GetTimestampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimestampResponse)
	err := c.cc.Invoke(ctx, TimestampService_GetTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timestampServiceClient) VerifyTimestamp(ctx context.Context, in *VerifyTimestampRequest, opts ...grpc.CallOption) (*VerifyTimestampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyTimestampResponse)
	err := c.cc.Invoke(ctx, TimestampService_VerifyTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timestampServiceClient) GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValidatorsResponse)
	err := c.cc.Invoke(ctx, TimestampService_GetValidators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timestampServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, TimestampService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimestampServiceServer is the server API for TimestampService service.
// All implementations must embed UnimplementedTimestampServiceServer
// for forward compatibility.
//
// TimestampService provides methods for getting and verifying timestamps
type TimestampServiceServer interface {
	// GetTimestamp requests a new signed timestamp
	GetTimestamp(context.Context, *GetTimestampRequest) (*GetTimestampResponse, error)
	// VerifyTimestamp verifies a timestamp's signatures
	VerifyTimestamp(context.Context, *VerifyTimestampRequest) (*VerifyTimestampResponse, error)
	// GetValidators returns the list of active validators
	GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error)
	// GetStatus returns the node's current status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedTimestampServiceServer()
}

// UnimplementedTimestampServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimestampServiceServer struct{}

func (UnimplementedTimestampServiceServer) GetTimestamp(context.Context, *GetTimestampRequest) (*GetTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestamp not implemented")
}
func (UnimplementedTimestampServiceServer) VerifyTimestamp(context.Context, *VerifyTimestampRequest) (*VerifyTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTimestamp not implemented")
}
func (UnimplementedTimestampServiceServer) GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (UnimplementedTimestampServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTimestampServiceServer) mustEmbedUnimplementedTimestampServiceServer() {}
func (UnimplementedTimestampServiceServer) testEmbeddedByValue()                          {}

// UnsafeTimestampServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimestampServiceServer will
// result in compilation errors.
type UnsafeTimestampServiceServer interface {
	mustEmbedUnimplementedTimestampServiceServer()
}

func RegisterTimestampServiceServer(s grpc.ServiceRegistrar, srv TimestampServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimestampServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimestampService_ServiceDesc, srv)
}

func _TimestampService_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServiceServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimestampService_GetTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServiceServer).GetTimestamp(ctx, req.(*GetTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimestampService_VerifyTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServiceServer).VerifyTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimestampService_VerifyTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServiceServer).VerifyTimestamp(ctx, req.(*VerifyTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimestampService_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServiceServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimestampService_GetValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServiceServer).GetValidators(ctx, req.(*GetValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimestampService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimestampService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimestampService_ServiceDesc is the grpc.ServiceDesc for TimestampService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimestampService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeserver.TimestampService",
	HandlerType: (*TimestampServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimestamp",
			Handler:    _TimestampService_GetTimestamp_Handler,
		},
		{
			MethodName: "VerifyTimestamp",
			Handler:    _TimestampService_VerifyTimestamp_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _TimestampService_GetValidators_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TimestampService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/timeserver.proto",
}
